[tool.poetry]
name = "rogalik"
version = "0.1.0"
description = ""
authors = ["XakepAnonim"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = { extras = ["uvicorn"], version = "^0.115.5" }
uvicorn = "^0.32.1"
pre-commit = "^4.0.1"
loguru = "^0.7.2"
ruff = "^0.8.1"
isort = "^5.13.2"
httpx = "^0.28.0"
python-dotenv = "^1.0.1"
redis = "^5.2.0"
python-socketio = "^5.11.4"
pydantic-settings = "^2.6.1"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-rerunfailures = "^15.0"
structure-generator-by-xakepanonim = "^0.3.0"
alembic = "^1.14.0"
psycopg2-binary = "^2.9.10"
click = "^8.1.7"
pygame = "^2.6.1"
ruff-lsp = "^0.0.59"
pyjwt = "^2.10.1"
cryptography = "^44.0.0"
passlib = "^1.7.4"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[[tool.poetry.source]]
name = "fpho"
url = "https://files.pythonhosted.org"
priority = "primary"


[[tool.poetry.source]]
name = "PyPI"
priority = "primary"


[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests",
    "versions",
]
include = ["pyproject.toml", "src/**/*.py", ]

line-length = 120
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
extend-select = ["E302"]  # extra rule to ensure two blank lines before top-level code
preview = true
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade,
    "YTT", # flake8-2020
    "Q", # flake8-quotes
    "T10", # flake8-debugger
    "INT", # flake8-gettext
    "PL", # pylint
    "PT", # flake8-pytest
    "PIE", # misk-lints
    "PYI", # flake8-pyi
    "TID", # flake8-tidy-imports
    "ISC", # implicit-str-concat
    "TCH", # type checking imports
    "PGH", # pygrep-helpers
    "RUF", # ruff
    "S102", # flake8-bandit
    "PERF", # Perflint
    "FLY", # flynt
    "G", # flake8-logging-format
    "FA", # flake8-annotations-complexity
    "D", # docstring checks
    "RET", # return statement checks
    "T201", # flake8-print linter
    "ANN201", # annotation checks (specific types of annotations)
    "ANN001", # general annotation checks (missing or improper annotations)
    "D213",
]

ignore = [
    "I", # isort
    "B008", # do not perform function calls in argument defaults
    "B024", # abstract base class, but it has no abstract methods
    "W191", # indentation contains tabs
    "RUF002", # check for cyrillic symbols
    "RUF012", # check Mutable class attributes
    "G004", # Logging statement uses string formatting
    "D200", # One-line docstring should fit on one line with quotes
    "D203", # One blank line before class
    "D212", # Multi-line docstring summary should start at the second line
    "D400", # First line should end with a period
    "D415", # First line should end with a period, question mark, or exclamation point
    "D205", # 1 blank line required between summary line and description
    "D107", # Missing docstring in init,
    "RUF003", # Comment contains ambiguous Ð£ (CYRILLIC CAPITAL LETTER U). Did you mean Y (LATIN CAPITAL LETTER Y)?
    "TID252", # Prefer absolute imports over relative imports from parent modules
    "RUF001", # check for latin symbols
    "PLR0912", # too many branches
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "PLR2004", # magic-value-comparison
    "PLW2901", # possibly related to unreliable or non-standard code constructs (context-specific)
    "PGH003", # Use specific rule codes when ignoring type issues
    "TCH002", # could be related to tech debt or specific code patterns that need reworking
    "PLC0415", # could warn about inappropriate type annotations or unresolved imports
    "PLW0108", # variable assigned but not used (e.g. placeholders like `_`)
    "PLC0415", # handles issues with unresolved imports or type hints (context-dependent)
    "RUF029", # checks for uncommon characters in string literals or code comments
    "PLR6301", # possibly related to complex exception handling logic
    "PLR6201", # potentially checks for overly complex try-except blocks
    "C419", # related to redundant return statements or expressions
    "PLC2701", # warns about unnecessary or redundant function definitions or behavior
    "PLR0917", # too many "return" statements in a function or method
    "PLR0914", # too many local variables in a function or method
    "RUF027", # checks for redundant or unnecessary code structures or logic
    "PLR1702", # excessive nested blocks (e.g. deeply nested loops or conditionals)
]

fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.isort]
line_length = 120
multi_line_output = 3
force_single_line = true
include_trailing_comma = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]


[tool.structure_generator]
exclude = [
    'venv',
    '__pycache__',
    '.git',
    '.env',
    '.venv',
    '.idea',
    '.vscode',
    '.DS_Store',
    '.gitignore',
    'migrations',
    'versions',
    'db.sqlite3',
    '.log',
    '.jar',
    'node_modules',
    'dist',
    '.ruff_cache',
    ".bzr",
    ".direnv",
    ".eggs",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".svn",
    ".tox",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "site-packages",
    "tests"
]

read_docstrings = true
output_file = "README.md"
